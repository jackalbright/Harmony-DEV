<?php
class TrackingRequestsController extends AppController {

	var $name = 'TrackingRequests';
	var $helpers = array('Html', 'Form');
	var $uses = array('TrackingRequest','TrackingProductCalculatorRequest','Customer','CustomImage');
	var $components = array("GeoIp");

	function beforeFilter()
	{
		if (isset($_REQUEST['date_start']))
		{
			$this->Session->write("admin.tracking_requests.date_start", $_REQUEST['date_start']);
		}
		if (isset($_REQUEST['date_end']))
		{
			$this->Session->write("admin.tracking_requests.date_end", $_REQUEST['date_end']);
		}

		parent::beforeFilter();
	}

	function beforeRender()
	{
		parent::beforeRender();
		$this->set("tracking_requests", $this->Session->read("admin.tracking_requests"));
	}

	function index() {
		$this->TrackingRequest->recursive = 0;
		$this->set('trackingRequests', $this->paginate());
	}

	function view($id = null) {
		if (!$id) {
			$this->Session->setFlash(__('Invalid TrackingRequest.', true));
			$this->redirect(array('action'=>'index'));
		}
		$this->set('trackingRequest', $this->TrackingRequest->read(null, $id));
	}

	function add() {
		if (!empty($this->data)) {
			$this->TrackingRequest->create();
			if ($this->TrackingRequest->save($this->data)) {
				$this->Session->setFlash(__('The TrackingRequest has been saved', true));
				$this->redirect(array('action'=>'index'));
			} else {
				$this->Session->setFlash(__('The TrackingRequest could not be saved. Please, try again.', true));
			}
		}
	}

	function edit($id = null) {
		if (!$id && empty($this->data)) {
			$this->Session->setFlash(__('Invalid TrackingRequest', true));
			$this->redirect(array('action'=>'index'));
		}
		if (!empty($this->data)) {
			if ($this->TrackingRequest->save($this->data)) {
				$this->Session->setFlash(__('The TrackingRequest has been saved', true));
				$this->redirect(array('action'=>'index'));
			} else {
				$this->Session->setFlash(__('The TrackingRequest could not be saved. Please, try again.', true));
			}
		}
		if (empty($this->data)) {
			$this->data = $this->TrackingRequest->read(null, $id);
		}
	}

	function delete($id = null) {
		if (!$id) {
			$this->Session->setFlash(__('Invalid id for TrackingRequest', true));
			$this->redirect(array('action'=>'index'));
		}
		if ($this->TrackingRequest->del($id)) {
			$this->Session->setFlash(__('TrackingRequest deleted', true));
			$this->redirect(array('action'=>'index'));
		}
	}

	function admin_index()
	{
		# Index page of possible reports.
		if (!empty($this->data))
		{
			foreach($this->data as $key => $val)
			{
				$this->Session->write("admin.tracking_requests.$key", $val);
			}
		}

		$this->data = $this->Session->read("admin.tracking_requests");
		if (empty($this->data['date_start']))
		{
			$this->data['date_start'] = date("Y-m-d");
		}
		if (empty($this->data['date_end']))
		{
			$this->data['date_end'] = date("Y-m-d");
		}
		#print_r($this->data);
		$this->Session->write("admin.tracking_requests", $this->data);
	}


	function admin_daily_stats() {
		#$this->TrackingRequest->recursive = 0;
		#$this->set('trackingRequests', $this->paginate());

		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));;
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$page_hits = $this->TrackingRequest->find('count', array('conditions'=>"'$morning' <= date AND date <= '$midnight' AND is_bot = 0 AND internal = 0"));
		$this->set("page_hits", $page_hits);

		$user_count = $this->TrackingRequest->find('count', array('fields'=>'DISTINCT address', 'conditions'=>"'$morning' <= date AND date <= '$midnight' AND is_bot = 0 AND internal = 0"));
		$this->set("user_count", $user_count);

		#$top_pages = $this->TrackingRequest->find("all", array('fields'=>'COUNT(*) AS count, url', 'group'=>'url', 'conditions'=>"'$morning' <= date AND date <= '$midnight' AND is_bot = 0 AND internal = 0", 'order'=>'count DESC'));
		#$this->set("top_pages", $top_pages);

		#$last_pages = $this->TrackingRequest->query("SELECT COUNT(*) AS count, url FROM tracking_requests WHERE tracking_request_id IN (SELECT MAX(tracking_request_id) FROM tracking_requests WHERE is_bot = 0 AND internal = 0 AND '$morning' <= date AND date <= '$midnight' GROUP BY address) GROUP BY url ORDER BY count DESC");
		# THIS QUERY MESSED THINGS UP!
		
		#find("all", array('group'=>'address', 'conditions'=>"'$morning' <= date AND date <= '$midnight' AND is_bot = 0", 'order'=>'date DESC'));
		#print_r($last_pages);
		#$this->set("last_pages", $last_pages);
	}

	function admin_browser()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));
		$query = "SELECT count(*) AS count, browser FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' GROUP BY browser ORDER BY count DESC";
		$browsers = $this->TrackingRequest->query($query);

		$browser_vendors = array();
		$browser_versions = array();
		$total_count = 0;

		foreach($browsers as $browser)
		{
			$name = $browser['tracking_requests']['browser'];
			$count = $browser[0]['count'];
			
			$vendor = "Other";
			$version = "";
			if (preg_match("/(MSIE) ([^;]+);/", $name, $matches))
			{
				$vendor = $matches[1];
				$version = $matches[2];
			} else if (preg_match("/(Firefox)\/(\S+)/", $name, $matches)) {
				$vendor = $matches[1];
				$version = $matches[2];
			} else if (preg_match("/(Safari)\/(\S+)/", $name, $matches)) {
				$vendor = $matches[1];
				$version = $matches[2];
			} else if (preg_match("/(Opera) (\S+)/", $name, $matches)) {
				$vendor = $matches[1];
				$version = $matches[2];
			}

			if (!isset($browser_vendors[$vendor])) { $browser_vendors[$vendor] = 0; }
			$browser_vendors[$vendor] += $count;

			if ($version != "")
			{
				if (!isset($browser_versions[$vendor])) { $browser_versions[$vendor] = array(); }
				if (!isset($browser_versions[$vendor][$version])) { $browser_versions[$vendor][$version] = 0; }
				$browser_versions[$vendor][$version] += $count;
			}

			$total_count += $count;
		}

		$this->set("browser_vendors", $browser_vendors);
		$this->set("browser_versions", $browser_versions);
		$this->set("total_count", $total_count);


	}

	function admin_page_details()
	{
		$url = $_REQUEST['path'];
		# 
		# basic stats about a page:
		#
		# how many hits
		# what pages people came from (#, %)
		# where people went to next (#, %) -- including ABANDONED
		# what search engines people came from to page (#, %, % total)
		# what keywords people searched for to find the page....
		
		# list of click streams (with longest clickstreams up top)
	}

	function admin_trail()
	{
		$url = $_REQUEST['path'];
		$landing = isset($_REQUEST['landing']);

		# If we only want records based off landing pages, just search

		# Find records whose url is the one in question.
		# If we ask for landing pages only, ensure referer is external

		# And only get requests AFTER this url's...

		# Get all requests for the page....

		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));


		$query = "SELECT * FROM tracking_requests WHERE url = '$url' AND '$morning' <= date AND date <= '$midnight'";
		if ($landing) { $query .= " AND referer LIKE 'http%' AND referer NOT LIKE '%harmonydesigns.com%'"; }
		$query .= " GROUP BY address";

		# Get session_id and date.
		$users = $this->TrackingRequest->query($query);

		$user_path = array();
		$user_referers = array();
		$last_visits = array();

		foreach($users as $user)
		{
			$session_id = $user['tracking_requests']['address'];
			$user_data[$session_id] = array();
			$date = $user['tracking_requests']['date'];
			$user_referers[$session_id] = $user['tracking_requests']['complete_referer'];

			# Now for this person, get all requests after this date

			$later_requests = $this->TrackingRequest->query("SELECT * FROM tracking_requests WHERE address = '$session_id' ORDER BY date");

			$user_path[$session_id] = array();
			foreach($later_requests as $later_request)
			{
				$later_url = $later_request['tracking_requests']['url'];
				$user_path[$session_id][] = $later_request;
				$last_visits[$session_id] = $later_request['tracking_requests']['date'];
			}
		}

		# Now we have it separated by user.

		$this->set("user_referers", $user_referers);
		$this->set("user_paths", $user_path);
		$this->set("url", $url);
		$this->set("last_visits", $last_visits);

		#print_r($user_path);
	}

	function admin_trail_by_search()
	{
		$search = "q=".preg_replace("/ /", "+", $_REQUEST['search']);

		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		# Get user addresses based off of searches.

		$query = "SELECT DISTINCT address FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND referer_query_string LIKE '%$search%'";
		$address_records = $this->TrackingRequest->query($query);

		$addressess = array();
		foreach($address_records as $address_record)
		{
			$addresses[] = $address_record['tracking_requests']['address'];
		}

		$user_path = array();
		$user_referers = array();
		$last_visits = array();

		foreach($addresses as $session_id)
		{
			$user_data[$session_id] = array();

			# Now for this person, get all requests after this date

			$later_requests = $this->TrackingRequest->query("SELECT * FROM tracking_requests WHERE address = '$session_id' AND '$morning' <= date AND date <= '$midnight' ORDER BY date");

			$user_path[$session_id] = array();
			foreach($later_requests as $later_request)
			{
				$later_url = $later_request['tracking_requests']['url'];
				$user_path[$session_id][] = $later_request;
				$last_visits[$session_id] = $later_request['tracking_requests']['date'];
			}
		}

		# Now we have it separated by user.

		$this->set("user_paths", $user_path);
		$this->set("search", $search);
		$this->set("last_visits", $last_visits);

		#print_r($user_path);
	}

	function admin_product_flow_raw()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$flow_records = $this->TrackingRequest->query("SELECT * FROM tracking_requests WHERE address IN (SELECT DISTINCT address FROM tracking_requests WHERE is_bot = 0 AND internal = 0 AND url LIKE '/details/%' AND '$morning' <= date AND date <= '$midnight') AND '$morning' <= date AND date <= '$midnight' ORDER BY date ASC");
		$sequence = array();
		#print_r($flow_records);
		foreach($flow_records as $record)
		{
			$session_id = $record['tracking_requests']['address'];
			# Group by user to get individual flows.
			$sequence[$session_id][] = $record['tracking_requests']['url'];
		}

		$this->set("sequence", $sequence);
		$this->action = "product_flow_raw";
	}

	function admin_product_flow()
	{
		$sequence = $this->viewVars['sequence'];

		$page_flows = array();

		$i = 0;
		foreach($sequence as $session_id => $pages)
		{
			foreach($pages as $page)
			{
				if(!isset($page_flows[$i][$page])) { $page_flows[$i][$page] = 0; }
				$page_flows[$i][$page]++; # Add count.
			}
		}

		# Now gather percentages 
		$this->set("page_flows", $page_flows);
		$this->action = "product_flow_summary";
	}

	function admin_track_process()
	# Step within checkout process
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$urls = array( # Regexp.
			#'/build$',
			#'/build/quantity',
			'/build/step',
			'/build/step/quote',
			'/build/step/border',
			'/build/step/tassel',
			'/build/step/charm',
			'/build/step/personalization',
			'/build/step/comments',
			'/build/cart',

			'/cart/add.php',
			'/cart/display.php',
			'/checkout',
			'/account/signup',
			'/checkout/review.php',
			'/checkout/cardAdd.php',
			'/checkout/receipt.php',
		);

		$important_urls = array(
			'/build/cart',
			'/cart/display.php',
			'/checkout',
			'/checkout/review.php',
			'/account/signup',
			'/checkout/cardAdd.php',
			'/checkout/receipt.php',
		);

		# x% make it to url X, y% to url Y, etc...

		#$url_csv = " AND url REGEXP '(".join("|", $urls).")'";
		$pages = array();

		for($i = 0; $i < count($urls); $i++)
		{
			$url = $urls[$i];

			$records = $this->TrackingRequest->query("SELECT url, COUNT(*) AS count FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND url REGEXP '$url' GROUP BY url");
	
			# Need to track where they go next....
	
			foreach($records as $record)
			{
				$url = $record['tracking_requests']['url'];
				$count = $record[0]['count'];

				# Track next pages....
	
				# Get session id's associated with pages..
				$sessid_records = $this->TrackingRequest->query("SELECT DISTINCT session_id,tracking_request_id FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND url = '$url' GROUP BY session_id");
	
				$next_pages = array();
				$prev_pages = array();

				$sess_csv = "";
	
				foreach($sessid_records as $sessid_record)
				{
					$session_id = $sessid_record['tracking_requests']['session_id'];
					$tid = $sessid_record['tracking_requests']['tracking_request_id'];
					# Get next page.

					$sess_csv .= ($sess_csv ? ", " : "") . "'$session_id'";
	
					$next_page_record = $this->TrackingRequest->query("SELECT url FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND session_id = '$session_id' AND tracking_request_id > '$tid' AND url != '$url' ORDER BY tracking_request_id ASC LIMIT 1");
					$prev_page_record = $this->TrackingRequest->query("SELECT url FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND session_id = '$session_id' AND tracking_request_id < '$tid' AND url != '$url' ORDER BY tracking_request_id DESC LIMIT 1");
					# EXCLUDE SELF, only indicates updates, etc...
	
					if (!empty($next_page_record))
					{
						$next_page = $next_page_record[0]['tracking_requests']['url'];
						if(empty($next_pages[$next_page])) { $next_pages[$next_page] = 0; }
						$next_pages[$next_page]++;
					}
					if (!empty($prev_page_record))
					{
						$prev_page = $prev_page_record[0]['tracking_requests']['url'];
						if(empty($prev_pages[$prev_page])) { $prev_pages[$prev_page] = 0; }
						$prev_pages[$prev_page]++;
					}
	
				}

				# Now try to tally how much people go to the important pages....
				$important_csv = "";
				foreach($important_urls as $iu)
				{
					$important_csv .= ($important_csv ? ", " : "") . "'$iu'";
				}
				$important_records = $this->TrackingRequest->query("SELECT session_id,url FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND url IN ($important_csv) AND session_id IN ($sess_csv)");
				$important = array();
				$important_sessions = array();
				foreach($important_records as $important_record)
				{
					$important_url = $important_record['tracking_requests']['url'];
					$important_sid = $important_record['tracking_requests']['session_id'];

					if (empty($important_sessions[$important_sid.$important_url])) {
						if (empty($important[$important_url])) { $important[$important_url] = 0; }
						$important[$important_url]++;
						$important_sessions[$important_sid.$important_url] = 1;
					} 
				}
	
				$pages[$url] = array(
					'count'=>$count,
					'next_pages'=>$next_pages,
					'prev_pages'=>$prev_pages,
					'important_pages'=>$important,
				);
			}
		}

		$this->set("urls", $urls);
		$this->set("pages", $pages);
		$this->set("important_pages", $important_urls);
	}

	function admin_top_pages($filtered = false)
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$filtered_where = $filtered ? " AND url NOT REGEXP '^(/details|/products|/gallery/browse|/gallery/view)' AND URL NOT REGEXP '^/$'" : "";

		$records = $this->TrackingRequest->query("SELECT url, COUNT(*) AS count FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' $filtered_where GROUP BY url ORDER BY count DESC");
		$total = 0;
		foreach($records as $rec)
		{
			$total += $rec[0]['count'];
		}
		$this->set("total", $total);

		$this->set("top_pages", $records);
	}

	function admin_pricing_calculator($sessid = '')
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$session = "";

		if ($sessid != "")
		{
			$session = " AND session_id = '$sessid' ";
		}

		$records = $this->TrackingProductCalculatorRequest->findAll("'$morning' <= date AND date <= '$midnight' $session", null, "date DESC");
		# GROUP BY USER...
		$calculator_users = array();
		$user_tracking_requests = array();
		foreach($records as $record)
		{
			$session_id = $record['TrackingProductCalculatorRequest']['session_id'];
			if(!isset($calculator_users[$session_id])) { $calculator_users[$session_id] = array(); }
			$calculator_users[$session_id][] = $record['TrackingProductCalculatorRequest'];
		}
		foreach($calculator_users as $session_id => $calc_req)
		{
			$user_tracking_requests[$session_id] = $this->TrackingRequest->findAll("session_id = '$session_id' AND '$morning' <= date AND date <= '$midnight'",null,"date ASC");
		}
		$this->set("user_tracking_requests", $user_tracking_requests);
		$this->set("requests", $records);
		$this->set("products", Set::combine($this->Product->findAll(), '{n}.Product.code','{n}.Product'));
		$this->set("calculator_users", $calculator_users);
	}

	function admin_session($sessid)
	{
		if (!$sessid)
		{
			$this->Session->setFlash("No session specified");
			$this->redirect(array('admin'=>true,'action'=>'index'));
		}
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$session_id = null;
		
		if (preg_match("/\d+[.]\d+[.]\d+[.]\d+/", $sessid)) {  # IP ADDRESS
			$requests = $this->TrackingRequest->findAll("address = '$sessid' AND '$morning' <= date AND date <= '$midnight'",null,"date ASC");
		} else if (preg_match("/@/", $sessid)) { # EMAIL
			$customer = $this->Customer->find("eMail_Address = '$sessid'");
			$customer_id = $customer['Customer']['customer_id'];

			#$requests = $this->TrackingRequest->findAll("customer_id = '$customer_id' AND '$morning' <= date AND date <= '$midnight'",null,"date ASC");
			$requests = $this->TrackingRequest->findAll("customer_id = '$customer_id'",null,"date ASC");
		} else {
			$session_id = $sessid;
			#$requests = $this->TrackingRequest->findAll("session_id = '$sessid' AND '$morning' <= date AND date <= '$midnight'",null,"date ASC");
			$requests = $this->TrackingRequest->findAll("session_id = '$sessid' ",null,"date ASC");
		}
		$this->set("requests", $requests);
		if (!count($requests))
		{
			$this->Session->setFlash("No session found");
			$this->redirect(array('admin'=>true,'action'=>'index'));
		}
		#print_r($requests);
		$ip = $requests[0]['TrackingRequest']['address'];
		$address = gethostbyaddr($ip);
		$browser = $requests[0]['TrackingRequest']['browser'];
		$referer = $requests[0]['TrackingRequest']['referer'];
		$referer_query_string = $requests[0]['TrackingRequest']['referer_query_string'];
		parse_str($referer_query_string, $qs);
		$search_string = isset($qs['q']) ? preg_replace("/[+]/", " ", $qs['q']) : "";
		$customer_id = null;
		foreach($requests as $req)
		{
			if ($customer_id = $req['TrackingRequest']['customer_id'])
			{
				break;
			}
		}
		$account = null;
		$custom_images = array();
		if ($customer_id) { 
			$account = $this->Customer->find("customer_id = '$customer_id'"); 
			$custom_images = $this->CustomImage->findAll("CustomImage.customer_id = '$customer_id'");
		}
		if ($session_id)
		{
			$custom_images = $this->CustomImage->findAll("CustomImage.session_id = '$session_id'");
		}
		if (empty($custom_images)) { $custom_images = array(); }

		$location = $this->GeoIp->lookupIP($ip);
		$this->set("custom_images", $custom_images);
		$this->set("location", $location);
		$this->set("account", $account);
		$this->set("session_id", $sessid);
		$this->set("address", $address);
		$this->set("browser", $browser);
		$this->set("referer", $referer);
		$this->set("keywords", $search_string);
		$this->set("session_start", $requests[0]['TrackingRequest']['date']);
		$this->set("session_end", $requests[count($requests)-1]['TrackingRequest']['date']);
		$this->set("session_length", strtotime($requests[count($requests)-1]['TrackingRequest']['date']) - strtotime($requests[0]['TrackingRequest']['date']));
	}

	function admin_visit()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$records = $this->TrackingVisit->query("SELECT * FROM tracking_visits WHERE  AND referer NOT LIKE '%harmonydesigns.com%' AND '$morning' <= date AND date <= '$midnight' ORDER BY referer_query_string ASC");
	}

	function admin_top_search($keywords = false)
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$records = $this->TrackingRequest->query("SELECT referer_query_string,referer FROM tracking_requests WHERE referer_query_string != '' AND referer LIKE 'http%' AND referer NOT LIKE '%harmonydesigns.com%' AND '$morning' <= date AND date <= '$midnight' ORDER BY referer_query_string ASC");

		$searches = array();
		$referers = array();
		$phrases = array();

		$this->set("keywords", $keywords);
		$total = 0;

		foreach($records as $record)
		{
			$referer = $record['tracking_requests']['referer'];
			parse_str($record['tracking_requests']['referer_query_string'], $qs);
			if (empty($qs['q'])) { continue; }
			$total++;
			$search = preg_replace("/[+]/", " ", $qs['q']);
			if ($keywords)
			{
				$search_words = split(" ", $search);
				foreach($search_words as $sw)
				{
					if(!isset($phrases[$sw])) { $phrases[$sw] = array(); }
					if(!isset($phrases[$sw][$search])) { $phrases[$sw][$search] = 0; }
					$phrases[$sw][$search]++;
					if(!isset($searches[$sw])) { $searches[$sw] = 0; }
					$searches[$sw]++;
					if(!isset($referers[$sw])) { $referers[$sw] = array(); }
					if(!isset($referers[$sw][$referer])) { $referers[$sw][$referer] = 0; }
					$referers[$sw][$referer]++;
				}
			} else {
					if(!isset($searches[$search])) { $searches[$search] = 0; }
					$searches[$search]++;
					if(!isset($referers[$search])) { $referers[$search] = array(); }
					if(!isset($referers[$search][$referer])) { $referers[$search][$referer] = 0; }
					$referers[$search][$referer]++;
			}
		}

		$this->set("total", $total);

		$this->set("phrases", $phrases);
		$this->set("searches", $searches);
		$this->set("referers", $referers);
	}

	function admin_visit_length()
	{
		# Not just tracking visit length

		# but figuring out which pages contribute to each.... (may need whole trail...)

		# also put in keywords associated to session lengths.... (maybe wrong customer, maybe bad content)

		# ie, are people leaving? and if so when? and what from? what didnt they like? what were they looking for?

		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$visit_length = array();
		$session_ids = array();

		# 0-15 secs
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 0 AND 15)");
		$visit_length["0 - 15 secs"] = $records[0][0]['count'];
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 0 AND 15)");
		$session_ids["0 - 15 secs"] = $session_records;

		# 16-30 secs
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 16 AND 30)");
		$visit_length["16 - 30 secs"] = $records[0][0]['count'];
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 16 AND 30)");
		$session_ids["16 - 30 secs"] = $session_records;

		# 31-60 secs
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 31 AND 60)");
		$visit_length["31 - 60 secs"] = $records[0][0]['count'];
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 31 AND 60)");
		$session_ids["31 - 60 secs"] = $session_records;

		# 1 min - 2 mins
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 1*60 AND 2*60)");
		$visit_length["1 min - 2 mins"] = $records[0][0]['count'];
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 1*60 AND 3*60-1)");
		$session_ids["1 min - 2 mins"] = $session_records;

		# 3 mins - 5 mins
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 3*60 AND 6*60-1)");
		$visit_length["3 mins - 5 mins"] = $records[0][0]['count'];
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 3*60 AND 6*60-1)");
		$session_ids["3 mins - 5 mins"] = $session_records;

		# 6 mins - 15 mins
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 6*60 AND 16*60-1)");
		$visit_length["6 mins - 15 mins"] = $records[0][0]['count'];
		
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 6*60 AND 16*60-1)");
		$session_ids["6 mins - 15 mins"] = $session_records;

		# 6 mins - 30 mins
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 16*60 AND 31*60-1)");
		$visit_length["16 mins - 30 mins"] = $records[0][0]['count'];
		
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 16*60 AND 31*60-1)");
		$session_ids["16 mins - 30 mins"] = $session_records;

		# 31 mins - 1 hour
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 31*60 AND 60*60-1)");
		$visit_length["31 mins - 1 hour"] = $records[0][0]['count'];
		
		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) BETWEEN 31*60 AND 60*60-1)");
		$session_ids["31 mins - 1 hour"] = $session_records;

		# 1 hr+
		$records = $this->TrackingRequest->query("SELECT COUNT(*) AS count FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) >= 60 * 60)");
		$visit_length["1 hour+"] = $records[0][0]['count'];

		$session_records = $this->TrackingRequest->query("SELECT DISTINCT session_id FROM tracking_visits WHERE (session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight') AND (UNIX_TIMESTAMP(session_end) - UNIX_TIMESTAMP(session_start) >= 60 * 60)");

		$session_ids["1 hour+"] = $session_records;

		$visit_count = 0;
		foreach($visit_length as $len => $count)
		{
			$visit_count += $count;
		}

		$this->set("total_visits", $visit_count);
		$this->set("visit_length", $visit_length);
		$this->set("session_ids", $session_ids);

	}

	function admin_visits()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$records = $this->TrackingRequest->query("SELECT * FROM tracking_visits WHERE '$morning' <= date AND date <= '$midnight' ORDER BY url ASC");
		$this->set("visits", $records);
	}

	function admin_top_landing()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));

		$records = $this->TrackingRequest->query("SELECT * FROM tracking_visits WHERE session_start BETWEEN '$morning' AND '$midnight' OR session_end BETWEEN '$morning' AND '$midnight'");

		$landing_areas = array(); # /section => #
		$landing_area_pages = array(); # /section => [pagelist => # ]

		$all_keywords = array();
		$all_referer_count = 0;
		$all_keyword_count = 0;
		$all_referers = array();
		$referer_keywords = array();

		$total_visits = 0;

		#echo "RECC=".count($records);

		foreach($records as $record)
		{
			# Group landing pages into sections.... /details, /gallery/view, /gallery/browse
			$url = $record['tracking_visits']['landingpage_url'];
			$referer = $record['tracking_visits']['referral_source'];
			$referer_query_string = $record['tracking_visits']['referer_query_string'];
			parse_str($referer_query_string, $qs);
			$keywords = 
				isset($qs['q']) ? preg_replace("/[+]/", " ", $qs['q']) : 
				(isset($qs['p']) ? preg_replace("/[+]/", " ", $qs['p']) : "");

			#echo "REC=".print_r($record,true);

			$section = "Other";
			$page = $url;

			if(preg_match("/(\/details)(.*)/", $url, $matches))
			{
				$section = $matches[1];
				$page = $matches[2];
			} else if(preg_match("/(\/gallery\/view)(.*)/", $url, $matches)) {
				$section = $matches[1];
				$page = $matches[2];
			} else if(preg_match("/(\/product\/build.php)(.*)/", $url, $matches)) {
				$section = $matches[1];
				$page = $matches[2];
			} else if(preg_match("/(\/gallery\/browse)(.*)/", $url, $matches)) {
				$section = $matches[1];
				$page = $matches[2];
			}

			if (!isset($landing_areas[$section])) { $landing_areas[$section] = 0; $landing_area_pages[$section] = array(); }
			$landing_areas[$section]++;
			if(!isset($landing_area_pages[$section][$page])) { $landing_area_pages[$section][$page] = 0; }
			$landing_area_pages[$section][$page]++;

			if(!isset($all_keywords[$keywords])) { $all_keywords[$keywords] = 0; }
			$all_keywords[$keywords]++;

			if(!isset($all_referers[$referer])) { $all_referers[$referer] = 0; }
			$all_referers[$referer]++;
			if(!isset($referer_keywords[$referer])) { $referer_keywords[$referer] = array(); }
			if(!isset($referer_keywords[$referer][$keywords])) { $referer_keywords[$referer][$keywords] = 0; }
			$referer_keywords[$referer][$keywords]++;
			$total_visits++;

			if(!isset($landing_pages[$keywords])) { $landing_pages[$keywords] = array(); }
			$landing_pages[$keywords][] = $url;
		}

		# x% come from site A, y% from site B, z% directly.
		# x% search for keyword A, y% keyword B, z% no keywords ...
		# x% go to landing page section A, y% to section B, ...

		$this->set("landing_areas", $landing_areas);
		$this->set("landing_pages", $landing_pages);
		$this->set("landing_area_pages", $landing_area_pages);
		$this->set("all_referers", $all_referers);
		$this->set("referer_keywords", $referer_keywords);
		$this->set("all_keywords", $all_keywords);
		$this->set("total_visits", $total_visits);
	}

	function admin_top_landing_old()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));


		$records = $this->TrackingRequest->query("SELECT * FROM tracking_requests WHERE referer LIKE 'http%' AND referer NOT LIKE '%harmonydesigns.com%' AND '$morning' <= date AND date <= '$midnight' ORDER BY url ASC");
		# Do our own count because we want referers separately....

		$hits = array();
		$referers = array();
		foreach($records as $record)
		{
			$url = $record['tracking_requests']['url'];
			$referer = $record['tracking_requests']['referer'];
			$referer_query_string = $record['tracking_requests']['referer_query_string'];
			parse_str($referer_query_string, $qs);
			$phrase = isset($qs['q']) ? $qs['q'] : "";
			$phrase = preg_replace("/[+]/", " ", $phrase);

			if(!isset($hits[$url])) { $hits[$url] = 0; }
			$hits[$url]++;


			if(!isset($referers[$url])) { $referers[$url] = array(); }
			if(!isset($referers[$url][$referer])) { $referers[$url][$referer] = array(); }
			if(!isset($referers[$url][$referer][$phrase])) { $referers[$url][$referer][$phrase] = 0; }
			$referers[$url][$referer][$phrase]++;
		}

		$this->set("hits", $hits);
		$this->set("referers", $referers);
	}

	function admin_top($report)
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));


		$url = isset($_REQUEST['url']) ? $_REQUEST['url'] : "";


		$report_sqls = array(
			'landing'=>array(
				'sql'=>'referer = "" OR referer IS NULL OR referer LIKE "http%" ',
				'group'=>'url',
				),
			'exit' => array(
				'sql'=>" tracking_request_id IN (SELECT MAX(tracking_request_id) FROM tracking_requests WHERE is_bot = 0 AND internal = 0 AND '$morning' <= date AND date <= '$midnight' GROUP BY address)",
				"group"=>'url',
				),
		);

		$this->set("report", $report);

		$report_sql = $report_sqls[$report]['sql'];
		$group_sql = $report_sqls[$report]['group'];
		if (!$report_sql)
		{
			$report_sql = "1=1";
		}
		if (!$group_sql)
		{
			$group_sql = 'url';
		}

		$top_records = $this->TrackingRequest->query("SELECT *, COUNT(*) AS count FROM tracking_requests WHERE $report_sql AND '$morning' <= date AND date <= '$midnight' GROUP BY $group_sql ORDER BY count DESC, url ASC");

		$this->set("top_records", $top_records);
	}

	function admin_top_exit()
	{
		$date_start = $this->Session->read("admin.tracking_requests.date_start");
		$date_end = $this->Session->read("admin.tracking_requests.date_end");
		$morning = date("Y-m-d 00:00:00", strtotime($date_start));
		$midnight = date("Y-m-d 23:59:59", strtotime($date_end));


		$url = isset($_REQUEST['url']) ? $_REQUEST['url'] : "";


		$records = $this->TrackingRequest->query("SELECT * FROM tracking_requests tr1 INNER JOIN (SELECT MAX(tracking_request_id),session_id FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight' AND NOW() > DATE_ADD(date, INTERVAL 30 MINUTE) GROUP BY session_id) AS tr2 ON tr1.session_id = tr2.session_id GROUP BY tr1.session_id"); # More than 30 minutes ago!

		$total_visits = $this->TrackingRequest->query("SELECT COUNT(DISTINCT session_id) AS count FROM tracking_requests WHERE '$morning' <= date AND date <= '$midnight'");
		$this->set("total_visits", $total_visits[0][0]['count']);
		# Well, unless they buy (hit conversion page), they're an 'exiter'...

		# SLOW?
		$last_pages = array();

		# GROUP BY SECTION...
		$sections = array("\/product\/build.php", "\/products\/calculator","\/details", "\/gallery\/browse", "\/gallery\/view");

		foreach($records as $record)
		{
			$url = $record['tr1']['url'];
			$qs = $record['tr1']['query_string'];
			if (preg_match("/start_over|new/", $qs)) { $qs = ""; } # Ignore
			$section = "";
			$page = $url;
			foreach($sections as $sec)
			{
				if(preg_match("/($sec)(.*)/", $url, $matches))
				{
					$page = $matches[2];
					$section = $matches[1];
				}
			}
			$url_parts = split("/", $url);
			if (!$section && count($url_parts) > 1) # Just split based on path.
			{
				$page = array_pop($url_parts);
				$section = join("/", $url_parts) . "/";
			}


			if(!isset($last_page_sections[$section]))
			{
				$last_page_section_count[$section] = 0;
				$last_page_sections[$section] = array();
			}
			if(!isset($last_page_sections[$section][$page]))
			{
				$last_page_sections[$section][$page] = 0;
			}
			$last_page_sections[$section][$page]++;
			$last_page_section_count[$section]++;

			#if(!isset($last_pages[$url])) { $last_pages[$url] = 0; }
			if(!isset($last_pages_qs[$url])) { $last_pages_qs[$url] = array(); }
			if(!isset($last_pages_qs[$url][$qs])) { $last_pages_qs[$url][$qs]= 0; }
			#$last_pages[$url]++;
			$last_pages_qs[$url][$qs]++;
		}
		$this->set("total_exits", count($records));
		#$this->set("last_pages", $last_pages);
		$this->set("last_page_sections", $last_page_sections);
		$this->set("last_page_section_count", $last_page_section_count);
		$this->set("last_pages_qs", $last_pages_qs);
	}

	function admin_view($id = null) {
		if (!$id) {
			$this->Session->setFlash(__('Invalid TrackingRequest.', true));
			$this->redirect(array('action'=>'index'));
		}
		$this->set('trackingRequest', $this->TrackingRequest->read(null, $id));
	}

	function admin_add() {
		if (!empty($this->data)) {
			$this->TrackingRequest->create();
			if ($this->TrackingRequest->save($this->data)) {
				$this->Session->setFlash(__('The TrackingRequest has been saved', true));
				$this->redirect(array('action'=>'index'));
			} else {
				$this->Session->setFlash(__('The TrackingRequest could not be saved. Please, try again.', true));
			}
		}
	}

	function admin_edit($id = null) {
		if (!$id && empty($this->data)) {
			$this->Session->setFlash(__('Invalid TrackingRequest', true));
			$this->redirect(array('action'=>'index'));
		}
		if (!empty($this->data)) {
			if ($this->TrackingRequest->save($this->data)) {
				$this->Session->setFlash(__('The TrackingRequest has been saved', true));
				$this->redirect(array('action'=>'index'));
			} else {
				$this->Session->setFlash(__('The TrackingRequest could not be saved. Please, try again.', true));
			}
		}
		if (empty($this->data)) {
			$this->data = $this->TrackingRequest->read(null, $id);
		}
	}

	function admin_delete($id = null) {
		if (!$id) {
			$this->Session->setFlash(__('Invalid id for TrackingRequest', true));
			$this->redirect(array('action'=>'index'));
		}
		if ($this->TrackingRequest->del($id)) {
			$this->Session->setFlash(__('TrackingRequest deleted', true));
			$this->redirect(array('action'=>'index'));
		}
	}

}
?>
