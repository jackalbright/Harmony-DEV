<?php

include_once(dirname(__FILE__)."/../../includes/product_pricing.php");

include_once("cart_items_controller.php");

class CheckoutController extends CartItemsController {

	var $name = 'Checkout';
	var $helpers = array('Html', 'Form','Ajax');
	var $uses = array("Product", "ProductPricing", "ProductPart", "GalleryImage", "CustomImage", "CustomizationOption", "ProductRecommendedQuote", "ImageRecommendedQuote","Quote","Tassel","Charm","Border","Ribbon","Frame","ContactInfo","ShippingPricePoint","CartItem","CreditCard","Country","Purchase","OrderItem","ItemPart","ShippingMethod");
	var $components = array('AuthorizeNet','AddressBook');
	var $options = array();
	var $checkout_step = 1;

	function beforeFilter()
	{
		parent::beforeFilter();

		$customer = $this->Session->read("Auth.Customer");
		if (empty($customer) && $this->action != 'index')
		{
			#$cart = $this->get_cart_items();
			#if (empty($cart))
			#{
				$this->redirect("/");
			#} else {
			#	$this->redirect("/cart/display");
			#}
		}
	}

	function beforeRender()
	{
		parent::beforeRender();
		$this->set("checkout_step", $this->checkout_step);
		$this->set("status_bar_template", "checkout/progress");
	}

	function index()
	{
		$this->body_title = 'Checkout';
		# If logged in, redirect
		$customer = $this->Session->read("Auth.Customer");

		# Clear out defaults so we prompt them for everything.
		$this->Session->delete('shipping_method_id');
		$this->Session->delete("shipping_id");
		$this->Session->delete("billing_id");
		$this->Session->delete("payment_id");

		if(!empty($customer))
		{
			$this->redirect("/checkout/review");
		}
		# Going to checkout page.
	}

	function shipping_method()
	{
		$this->checkout_step = 2;
		$this->body_title = "Select Shipping Speed";
		if (!empty($this->data['ShippingMethod']['shipping_method_id']))
		{
			$this->Session->write("shipping_method_id", $this->data['ShippingMethod']['shipping_method_id']);
			$this->redirect("/checkout/review");
		}

		$this->load_cart(); # Loads shipping stuff...
	}

	function shipping_select()
	{
		$this->body_title = 'Specify Shipping Address';
		$customer = $this->Session->read("Auth.Customer");
		$customer_id = $customer['customer_id'];
		$addresses = $this->ContactInfo->findAll("Customer_ID = '$customer_id'");
		if (!count($addresses)) { $this->redirect("/checkout/shipping_edit"); }
		$this->set("addresses", $addresses);

		if (count($addresses) && empty($customer['shipping_id_pref'])) { $customer['shipping_id_pref'] = $addresses[0]['ContactInfo']['Contact_ID']; }

		$this->set("preferredAddress", $customer['shipping_id_pref']);

		#print_r($this->Session->read());

		if(!empty($this->data['ContactInfo']))
		{
			$contact_id = $this->data['ContactInfo']['Contact_ID'];
			if (empty($contact_id))
			{
				$contact_id = $this->AddressBook->save_address();
			}

			if (!empty($this->data['billing_same']))
			{
				$this->Session->write("billing_id", $contact_id);
			}

			if ($contact_id)
			{
				$this->Session->write("shipping_id", $contact_id);
				$this->redirect("/checkout/review");
			}
		}
		$this->set("countries", $this->Country->findAll());
		$this->set("shipping_id", $this->Session->read("shipping_id"));
		$this->set("billing_id", $this->Session->read("billing_id"));

		$this->js_required_fields[] = "ContactInfoInCareOf";
		$this->js_required_fields[] = "ContactInfoAddress1";
		$this->js_required_fields[] = "ContactInfoCity";
		$this->js_required_fields[] = "ContactInfoZipCode";
		$this->js_required_conditions = '($("new_address") && $("new_address").checked)'; # We have 'new' selected.

		$this->load_cart();
		$this->action = 'address_select';
		$this->set("type", 'shipping');
	}

	function billing_edit($contact_id = '')
	{
		$this->checkout_step = 1;
		$this->body_title = $contact_id ? 'Update Billing Address' : 'Add Billing Address';
		$customer_id = $this->Session->read("Auth.Customer.customer_id");
		error_log("D=".print_r($this->data,true));

		if (!empty($this->data))
		{
			error_log("D2");
			# Process.
			$contact_id = $this->AddressBook->save_address();
			if ($contact_id)
			{
				# Save billing id for default.
				$this->Session->write("Auth.Customer.billing_id_pref", $contact_id);
				$this->Customer->save(array('Customer'=>$this->Session->read("Auth.Customer")));
				$this->redirect("/checkout/billing_select");
			}
		}

		$this->data = $this->ContactInfo->find("Contact_ID = '$contact_id' AND customer_id = '$customer_id'");
		#if (!$this->data) { $this->redirect("/checkout/billing_select"); }

		$this->set("countries", $this->Country->findAll());
		$this->set("type", "billing");
		$this->set("shipping_id", $this->Session->read("shipping_id"));
		$this->set("billing_id", $this->Session->read("billing_id"));

		$this->load_cart();

		$this->js_required_fields[] = "ContactInfoInCareOf";
		$this->js_required_fields[] = "ContactInfoAddress1";
		$this->js_required_fields[] = "ContactInfoCity";
		$this->js_required_fields[] = "ContactInfoZipCode";

		$this->action = "address_edit";
	}

	function shipping_edit($contact_id = '')
	{
		$this->checkout_step = 1;
		$this->body_title = $contact_id ? 'Update Shipping Address' : 'Add Shipping Address';
		$customer_id = $this->Session->read("Auth.Customer.customer_id");

		error_log("DATA=".print_r($this->data,true));

		if (!empty($this->data))
		{
			# Process.
			$contact_id = $this->AddressBook->save_address();
			if ($contact_id)
			{
				if (!empty($this->data['billing_same']))
				{
					$this->Session->write("billing_id", $contact_id);
				}
				# Save shipping id for default.
				$this->Session->write("shipping_id", $contact_id);
				$this->Session->write("Auth.Customer.shipping_id_pref", $contact_id);
				$this->Customer->save(array('Customer'=>$this->Session->read("Auth.Customer")));
				$this->redirect("/checkout/review");
			}
		}

		if ($contact_id) { $this->data = $this->ContactInfo->find("Contact_ID = '$contact_id' AND customer_id = '$customer_id'"); }
	#	if (!$this->data) { $this->redirect("/checkout/billing_select"); }

		$this->set("countries", $this->Country->findAll());
		$this->set("shipping_id", $this->Session->read("shipping_id"));
		$this->set("billing_id", $this->Session->read("billing_id"));

		$this->load_cart();

		$this->js_required_fields[] = "ContactInfoInCareOf";
		$this->js_required_fields[] = "ContactInfoAddress1";
		$this->js_required_fields[] = "ContactInfoCity";
		$this->js_required_fields[] = "ContactInfoZipCode";

		$this->action = "address_edit";
	}

	function billing_select()
	{
		$this->checkout_step = 1;
		$this->body_title = 'Specify Billing Address';
		$customer = $this->Session->read("Auth.Customer");
		$customer_id = $customer['customer_id'];
		$addresses = $this->ContactInfo->findAll("customer_id = '$customer_id'");
		if (!count($addresses)) { $this->redirect("/checkout/billing_edit"); }
		$this->set("addresses", $addresses);
		if (count($addresses) && empty($customer['billing_id_pref'])) { $customer['billing_id_pref'] = $addresses[0]['ContactInfo']['Contact_ID']; }
		$this->set("preferredAddress", $customer['billing_id_pref']);

		#print_r($this->Session->read());

		if(!empty($this->data))
		{
			$contact_id = $this->data['ContactInfo']['Contact_ID'];
			if (empty($contact_id))
			{
				$contact_id = $this->AddressBook->save_address();
			}

			if ($contact_id)
			{
				$this->Session->write("billing_id", $contact_id);
				$this->redirect("/checkout/review");
			}
		}

		$this->js_required_fields[] = "ContactInfoInCareOf";
		$this->js_required_fields[] = "ContactInfoAddress1";
		$this->js_required_fields[] = "ContactInfoCity";
		$this->js_required_fields[] = "ContactInfoZipCode";
		$this->js_required_conditions = '($("new_address") && $("new_address").checked)'; # We have 'new' selected.


		$this->set("countries", $this->Country->findAll());
		$this->set("shipping_id", $this->Session->read("shipping_id"));
		$this->set("billing_id", $this->Session->read("billing_id"));

		$this->load_cart();
		$this->action = 'address_select';
		#$this->action = 'address_edit';
		$this->set("type", 'billing');

	}

	function payment_select()
	{
		$this->checkout_step = 3;
		$this->body_title = 'Select a Payment Method';
		$customer = $this->Session->read("Auth.Customer");
		$customer_id = $customer['customer_id'];
		$payments = $this->CreditCard->findAll("customer_id = '$customer_id'");
		if (empty($payments)) { $this->redirect("/checkout/payment_edit"); }
		foreach($payments as &$payment)
		{
			$payment['CreditCard']['NumberPlain'] = $this->CreditCard->decrypt($payment['CreditCard']['Number']);
		}
		$this->set("paymentMethods", $payments);

		$this->load_cart();

		$this->js_required_fields[] = "CreditCardCardType";
		$this->js_required_fields[] = "CreditCardCardholder";
		#$this->js_required_conditions = 'alert($($("CreditCardForm").elements["data[CreditCard][credit_card_id]"])';
		$this->js_required_conditions = '$("new_credit_card").checked'; # We have 'new' selected.

		if(!empty($this->data['CreditCard']))
		# Only update if we specify a NEW card....
		{
			$card_id = $this->data['CreditCard']['credit_card_id'];
			if (empty($card_id))
			{
				$card_id = $this->save_credit_card();
				if (!$card_id) { return; }
			}
			$this->Session->write("payment_id", $card_id);
			$this->redirect("/checkout/review");
		}
		$this->set("payment_id", $this->Session->read("payment_id"));

	}

	function payment_edit($payment_id = '')
	{
		$this->checkout_step = 3;
		$this->body_title = $payment_id ? 'Update Payment Method' : 'Add Payment Method';
		$customer_id = $this->Session->read("Auth.Customer.customer_id");

		if (!empty($this->data))
		{
			# Process.
			$payment_id = $this->save_credit_card();
			$this->Session->write("payment_id", $payment_id);
			$this->redirect("/checkout/review");
		}

		$this->data = $this->CreditCard->find("credit_card_id = '$payment_id' AND customer_id = '$customer_id'");
		#if (!$this->data) { $this->redirect("/checkout/payment_select"); }
		if (!empty($this->data['CreditCard']))
		{
			$this->data['CreditCard']['NumberPlain'] = $this->CreditCard->decrypt($this->data['CreditCard']['Number']);
		}

		$this->load_cart();

		$this->js_required_fields[] = "CreditCardCardType";
		$this->js_required_fields[] = "CreditCardCardholder";

		#$this->action = "payment_select";
	}

	function save_credit_card()
	{
		$customer_id = $this->Session->read("Auth.Customer.customer_id");
		$card_id = $this->data['CreditCard']['credit_card_id'];
		if (!$card_id || !$this->CreditCard->findCount("credit_card_id = '$card_id' AND Customer_ID = '$customer_id'"))
		# Make sure it's one of theirs.... ,else create
		{
			unset($this->data['CreditCard']['credit_card_id']);
			$this->CreditCard->create();
		}

		# May only be given id field....

		$this->data['CreditCard']['Customer_ID'] = $customer_id;
		$this->data['CreditCard']['Expiration'] = $this->data['CreditCard']['Expiration']['year'] . '-' . $this->data['CreditCard']['Expiration']['month'] . '-01';
		# Verify completedness....
		if (!$this->data['CreditCard']['Cardholder'])
		{
			$this->Session->setFlash("Missing cardholder name");
			return;
		} else if (strtotime($this->data['CreditCard']['Expiration']) < time()) {
		error_log("EXP=".print_r($this->data['CreditCard'],true));
			$this->Session->setFlash("Invalid expiration date. Card has expired.");
			return;
		} else if (!$this->CreditCard->is_valid_credit_card($this->data['CreditCard']['NumberPlain'])) {
			$this->Session->setFlash("Invalid card number");
			return;
		}
		$this->data['CreditCard']['Number'] = $this->CreditCard->encrypt($this->data['CreditCard']['NumberPlain']);

		$this->CreditCard->save($this->data);
		$card_id = $this->CreditCard->id;

		return $this->CreditCard->id;
	}

	function review()
	{
		$this->checkout_step = 4;
		$this->body_title = "Review Your Order";

		# Load customer info....
		$customer = $this->Session->read("Auth.Customer");
		$customer_id = $customer['customer_id'];
		$this->set("customer", $customer);

		# If not preferred shipping, prompt
		$shipping_id = $this->Session->read("shipping_id");
		if (!$shipping_id)
		{
			#$shipping_id = $customer['shipping_id_pref'];
			#$this->Session->write("shipping_id", $shipping_id);
		}
		if (!$shipping_id || !$this->ContactInfo->findCount("Contact_ID = '$shipping_id' AND Customer_ID = '$customer_id'"))
		{
			# FORCE THEM TO PUT IN....
			#echo "FOOD";
			#exit(0);
			$this->Session->delete("shipping_id");
			$this->redirect("/checkout/shipping_select");
		}
		# If not preferred billing method, prompt.

		#echo("SHIP=$shipping_id");

		# Load shipping address
		# (allow us to specify preference just for this session, OR default for ALL sessions)
		$shippingAddress = $this->ContactInfo->read(null, $shipping_id); # XXX allow for custom one just per this transaction.

		$this->set("shippingAddress", $shippingAddress['ContactInfo']);

		# If not preferred billing, prompt
		$billing_id = $this->Session->read("billing_id");
		if (!$billing_id)
		{
			$billing_id = $customer['billing_id_pref'];
		}
		if (!$billing_id || !$this->ContactInfo->findCount("Contact_ID = '$billing_id' AND Customer_ID = '$customer_id'"))
		{
			# FORCE THEM TO PUT IN....
			$this->Session->delete("billing_id");
			$this->redirect("/checkout/billing_select");
		}

		$billingAddress = $this->ContactInfo->read(null, $billing_id); # XXX allow for custom one just per this transaction.
		$this->set("billingAddress", $billingAddress['ContactInfo']);

		# Load page asking for shipping method.

		$shipping_method_id = $this->Session->read("shipping_method_id");
		if (!$shipping_method_id)
		{
			$this->redirect("/checkout/shipping_method");
		}

		$this->set("shipping_id", $shipping_method_id);


		$shippingMethod = $this->ShippingMethod->read($shipping_method_id);

		$this->set('shippingMethod', $shippingMethod);

		# Load cart items....
		$this->load_cart();

		#$shippingOptions = $this->ShippingPricePoint->calculate_shipping_options_list($shippingAddress, $this->viewVars['shoppingCart']); #array($zipCode, $country), $product_list);
		#$shippingOption = null;
		#foreach($shippingOptions as $so)
		#{
		#	if ($so['shippingMethod']['shippingMethodID'] == $shipping_method_id)
		#	{
		#		$shippingOption = $so;
		#	}
		#}
		#$this->set("shippingOption", $shippingOption);

		# Load billing
		# (allow us to specify preference just for this session, OR default for ALL sessions)
		$customer_id = $this->get_customer_id();
		$billingMethods = $this->CreditCard->findAll(" customer_id = '$customer_id' ");
		$this->set("billingMethods", $billingMethods);

		$payment_id = $this->Session->read("payment_id");

		if (!$payment_id || !$this->CreditCard->findCount("credit_card_id = '$payment_id' AND Customer_ID = '$customer_id'"))
		{
			$this->Session->delete("payment_id");
			$this->redirect("/checkout/payment_select");
		}
			
		#$billingMethod = $billingMethods[0];
		$billingMethod = $this->CreditCard->read(null, $payment_id);

		# DECODE CC num....
		$billingMethod['CreditCard']['NumberPlain'] = $this->CreditCard->decrypt($billingMethod['CreditCard']['Number']);
		$this->set("billingMethod", $billingMethod['CreditCard']); 


		# Verify we have contact info...
		$this->verify_contact_info();


		# Load shipping costs....

		# XXX Load grand total for the currently selected shipping option.....
		# TODO


	}

	function verify_contact_info()
	{
		$customer = $this->Session->read("Auth.Customer");

		$email = $customer['eMail_Address'];
		$phone = $customer['Phone'];

		#$this->Session->setFlash("C=".print_r($customer,true));

		if (!$email || !$phone)
		{
			$this->redirect("/checkout/contact_edit");
		}
	}

	function contact_edit()
	{
		$this->checkout_step = 3;
		$this->body_title = "Contact Information For Receipt / Shipping";
		$customer_id = $this->Session->read("Auth.Customer.customer_id");
		$customer = $this->get_customer();

		if (!empty($this->data))
		{
			$this->data['Customer']['customer_id'] = $customer_id; # ONLY THEM! can't manipulate in form....

			$billing_id = $this->Session->read("billing_id");
			$billing_address = $this->ContactInfo->read(null, $billing_id);
			$in_care_of = array("","");
			if (!empty($billing_address['ContactInfo']))
			{
				$in_care_of = preg_split("/[ ]+/", $billing_address['ContactInfo']['In_Care_Of']);
			}

			if (empty($customer['First_Name']) && count($in_care_of))
			{
				# Assume from chosen credit card.
				$this->data['Customer']['First_Name'] = $in_care_of[0];
			}

			if (empty($customer['Last_Name']) && count($in_care_of) >= 2)
			{
				# Assume from chosen credit card.
				$this->data['Customer']['Last_Name'] = $in_care_of[1];
			}

	
			if (!
				(
				#$this->Customer->verify_name($this->data) &&
				$this->Customer->verify_email($this->data) &&
				$this->Customer->verify_phone($this->data) &&
				(empty($this->data['Customer']['create_account']) || $this->Customer->verify_password($this->data,false))
				)
	
			)
			{
				$this->Session->setFlash(join("<br/>", $this->Customer->errors));
			} else {

				if (empty($this->data['Customer']['create_account']))
				{
					# Ignore password if they don't have account creation checked.... (they may have changed their mind)
					unset($this->data['Customer']['Password']);
					unset($this->data['Customer']['Password2']);
				}
				#print_r($_SESSION);
				#exit(0);
				if ($this->save_account($this->data))
				{
					#print_r($_SESSION);
					$this->redirect("/checkout/review");
				}
			}
		}

		if (!$this->data)
		{
			$this->data = $this->Customer->read(null, $customer_id);

			# Make assumptions for name (from billing name)
			$billing_id = $this->Session->read("billing_id");
			$billing_name = array();
			if ($billing_id)
			{
				$billing_address = $this->ContactInfo->read(null, $billing_id);
				$billing_name = preg_split("/\s+/", $billing_address['ContactInfo']['In_Care_Of']);
			}
			if (empty($this->data['Customer']['First_Name']) && count($billing_name) > 0)
			{
				$this->data['Customer']['First_Name'] = $billing_name[ 0 ];
			}
			if (empty($this->data['Customer']['Last_Name']) && count($billing_name) > 1)
			{
				$this->data['Customer']['Last_Name'] = $billing_name[ count($billing_name) - 1 ];
			}
		}

		#$this->js_required_fields[] = "CustomerFirstName";
		#$this->js_required_fields[] = "CustomerLastName";
		$this->js_required_fields[] = "CustomerEMailAddress";
		$this->js_required_fields[] = "CustomerPhone";

		$this->set("customer", $this->data);
		$this->load_cart();
	}

	function receipt()
	{
		$this->checkout_step = 0;
		# Process order....
		$this->body_title = "Your order has been submitted";

		if(empty($this->params['form']))
		{
			$this->redirect("/checkout/review");
		}

		# Get shipping method.
		#$shipping_method_id = $this->params['form']['shipping_method'];

		# Get everything in cart...
		list($shoppingCart, $subtotal, $product_list) = $this->get_cart_items();
		$this->set("shoppingCart", $shoppingCart);
		$this->set("subtotal", $subtotal);
		#$this->set("defaultShippingMethod", $shipping_method_id);

		$this->set("product_map", Set::combine($this->Product->findAll(), '{n}.Product.code', '{n}.Product'));

		###########return; # FOR NOW...

		# Initialize purchase
		$purchase_id = $this->initialize_purchase($shoppingCart, $product_list);

		$this->set("purchase_id", $purchase_id);

		# Charge card & finalize transaction
		$response = $this->process_payment($purchase_id);
		list($response_code,$response_msg,$reason_code,$reason_text) = $response;
		if ($response_code == $this->AuthorizeNet->APPROVED) {
			$this->finalize_purchase($purchase_id);
		} 
		else # Declined or error....
		{
			$this->Session->setFlash("Could not process payment: $reason_text");
			$this->redirect("/checkout/review");
		}
	}

	function process_payment($purchase_id)
	{
		 ### $response:Array = $this->AuthorizeNet->chargeCard($loginid:String, $trankey:String, $ccnum:String, $ccexpmonth:String, $ccexpyear:String, $ccver:String, $live:Boolean, $amount:Number, $tax:Number, $shipping:Number, $desc:String, $billinginfo:Array, $email:String, $phone:String, $shippinginfo:Array);

		 $authnet = array(
		 	'login'=>'harmony90',
			'trankey'=>'99x2YU522Jwmt3Vu',
		 );

		 $card_id = $this->Session->read("payment_id");
		 $card = $this->CreditCard->read(null, $card_id);

		 $cardNumberPlain = $this->CreditCard->decrypt($card['CreditCard']['Number']);
		 $cardExpTime = strtotime($card['CreditCard']['Expiration']);
		 $cardExpMonth = date('m', $cardExpTime);
		 $cardExpYear = date('Y', $cardExpTime);
		 $cardVer = ""; # Don't use...

		 $billing_id = $this->Session->read("billing_id");
		 $billingAddress = $this->ContactInfo->read(null, $billing_id);
		 $billingName = preg_split("/\s+/", $billingAddress['ContactInfo']['In_Care_Of']);
		 $billinginfo = array(
		 	'fname'=>array_shift($billingName),
			'lname'=>join(" ", $billingName),
			'address'=>$billingAddress['ContactInfo']['Address_1'].' '.$billingAddress["ContactInfo"]['Address_2'],
			'city'=>$billingAddress["ContactInfo"]['City'],
			'state'=>$billingAddress["ContactInfo"]['State'],
			'zip'=>$billingAddress["ContactInfo"]['Zip_Code'],
			'country'=>$billingAddress["ContactInfo"]['Country']
		 );

		 $shipping_id = $this->Session->read("shipping_id");
		 $shippingAddress = $this->ContactInfo->read(null, $shipping_id);
		 $shippingName = preg_split("/\s+/", $shippingAddress['ContactInfo']['In_Care_Of']);
		 $shippinginfo = array(
		 	'fname'=>array_shift($shippingName),
			'lname'=>join(" ", $shippingName),
			'address'=>$shippingAddress['ContactInfo']['Address_1'].' '.$shippingAddress["ContactInfo"]['Address_2'],
			'city'=>$shippingAddress["ContactInfo"]['City'],
			'state'=>$shippingAddress["ContactInfo"]['State'],
			'zip'=>$shippingAddress["ContactInfo"]['Zip_Code'],
			'country'=>$shippingAddress["ContactInfo"]['Country']
		 );

		 # Now get order info.
		 $purchase = $this->Purchase->read(null, $purchase_id);
		 $amount = $purchase['Purchase']['Charge_Amount'];
		 $shipping = 0; # Not sure what this is used for....
		 $tax = 0;

		 $desc = "Harmony Designs Order";
		 $customer = $this->Session->read("Auth.Customer");
		 $email = $customer['eMail_Address'];
		 $phone = $customer['Phone'];

		 $live = preg_match("/harmonydesigns[.]com$/", $_SERVER["HTTP_HOST"]);  # ONLY ON LIVE SERVER

		 $response = $this->AuthorizeNet->chargeCard($authnet['login'], $authnet['trankey'], $cardNumberPlain, $cardExpMonth, $cardExpYear, $cardVer, $live, $amount, $tax, $shipping, $desc, $billinginfo, $email, $phone, $shippinginfo);

		 return $response;
	}

	function finalize_purchase($purchase_id)
	{
		# put in items.
		$customer_id = $this->get_customer_id();
		$customer = $this->get_customer();
		$customer_email = $customer['eMail_Address'];
		$session_id = $this->get_session_id();

		#echo "PID=$purchase_id\n<br/>";

		$cart_items = $this->CartItem->findAll(" customer_id = '$customer_id' OR session_id = '$session_id' ");

		foreach($cart_items as $cart_item)
		{
			$order_item = array();
			$parts = unserialize($cart_item['CartItem']['parts']);
			#print_r($parts);
			$quantity = $cart_item['CartItem']['quantity'];
			$unitPrice = $cart_item['CartItem']['unitPrice'];
			$productCode = $cart_item["CartItem"]['productCode'];
			$product = $this->Product->find(" code = '$productCode' ");
			$productID = $product['Product']['product_type_id'];
			$specialID = null;
			$comments = $cart_item["CartItem"]['comments'];
			#$reproduction_bool = (empty($parts['reproductionStamp']) || $parts['reproductionStamp'] == 'no') ? false : true;
			$reproduction_bool = isset($parts['reproductionStamp']) ? $parts['reproductionStamp'] : false;
			$customization_xml = "";


			# order_item stores the product info.
			$order_item = array(
				'Quantity' => $quantity,
                                'Price' => $unitPrice,
                                'Purchase_id' => $purchase_id,
                                'product_type_id' => $productID,
                                'specialID' => $specialID,
                                'reproduction' => $reproduction_bool,
                                'comments' => $comments,
                                'customization_xml' => $customization_xml, 
			);

			$this->OrderItem->create();
			$this->OrderItem->save(array('OrderItem'=>$order_item));
			$item_id = $this->OrderItem->id;
			#echo "OID=$item_id\n<br/>";

			# item_parts stores the customization info.
			$item_part = array(
				"order_Item_ID"=>$item_id,
				"purchase_ID"=>$purchase_id,
                                "ribbon_ID"=>(!empty($parts['ribbonID']) ? $parts['ribbonID'] : null),
                                "tassel_ID"=>(!empty($parts['tasselID']) ? $parts['tasselID'] : null),
                                "charm_ID"=>(!empty($parts['charmID']) ? $parts['charmID'] : null),
                                "quote_ID"=>(!empty($parts['quoteID']) ? $parts['quoteID'] : null),
                                "Size"=>(!empty($parts['shirtSize']) ? $parts['shirtSize'] : null),
                                "PrintSide"=>(!empty($parts['printSide']) ? $parts['printSide'] : null),
                                "border_ID"=>(!empty($parts['borderID']) ? $parts['borderID'] : null),
                                "custom_quote"=>(!empty($parts['customQuote']) ? $parts['customQuote'] : null),
                                "personalization"=>(!empty($parts['personalizationInput']) ? $parts['personalizationInput'] : null),
                                "personalizationStyle"=>(!empty($parts['personalizationStyle']) ? $parts['personalizationStyle'] : null),
                                "catalogNumber"=>(!empty($parts['catalogNumber']) ? $parts['catalogNumber'] : null),
                                "stampNumber"=>(!empty($parts['catalogNumber']) ? $parts['catalogNumber'] : null),
                                "reproductionStamp"=>(!empty($reproduction_bool) ? $reproduction_bool : null),
                                "imageID"=>(!empty($parts['customImageID']) ? $parts['customImageID'] : null),
                                "frameID"=>(!empty($parts['frameID']) ? $parts['frameID'] : null),
                                "pinStyle"=>(!empty($parts['pinStyle']) ? $parts['pinStyle'] : null),
                                "handles"=>(!empty($parts['handles']) ? $parts['handles'] : null),
                                "postCardAddress"=>(!empty($parts['postcardAddress']) ? $parts['postcardAddress'] : null)
			);

			$this->ItemPart->create();
			$this->ItemPart->save(array('ItemPart'=>$item_part));
			#echo "IP=".$this->ItemPart->id;
		}

		if ($this->livesite)
		{
			$this->clear_cart();
		}
		
		####$this->clear_cart();


		# Send email to buyer and admin.
		$this->order_notification($purchase_id);
	}

	function get_all_shipping_options($shipping_id, $product_list)
	{
		$shippingAddress = $this->ContactInfo->read(null, $shipping_id);
		if(!empty($shippingAddress['ContactInfo']['Zip_Code']))
		{
			$country = $shippingAddress['ContactInfo']['Country'];
			$zipCode = $shippingAddress['ContactInfo']['Zip_Code'];
			#echo "SHIP=$zipCode";
		}
		$shippingOptions = $this->ShippingPricePoint->calculate_shipping_options_list(array($zipCode, $country), $product_list);
		return $shippingOptions;
	}

	function order_notification($purchase_id)
	{
		$purchase = $this->Purchase->read(null, $purchase_id);
		$shipping_id = $purchase['Purchase']['Shipping_ID'];
		$customer = $this->get_customer();
		$customer_email = $customer['eMail_Address'];

		$order_items = $this->OrderItem->findAll(" OrderItem.purchase_id = '$purchase_id' ");
		$product_list = array();
		foreach($order_items as $order_item)
		{
			$product_id = $order_item['OrderItem']['product_type_id'];
			$product = $this->Product->read(null, $product_id);
			$code = $product['Product']['code'];
			$product_list[$code] = $order_item['OrderItem']['Quantity'];
		}

		#$shippingOptions = $this->get_all_shipping_options($shipping_id, $product_list);

		$subject = "Harmony Designs Order # $purchase_id";
		$template = "checkout/order_submit_customer";
		$admin_template = "checkout/order_submit_admin";
		$vars = array(
			'purchaseID'=>$purchase_id,
			'customer'=>$customer,
			'database'=>$this->database,
			#'shippingOptions'=>$shippingOptions,
		);

		#$this->sendAdminEmail($subject, $admin_template, $vars);
		$this->sendEmail($customer_email, $subject, $admin_template, $vars);
		if ($customer_email)
		{
			$this->sendEmail($customer_email, $subject, $template, $vars);
		}
	}


	function initialize_purchase($shoppingCart, $product_list)
	{

                $order_date = date('Y-m-d');
                $order_status = 'Submitted';
		$shipping_method_id = !empty($this->params['form']['shipping_method']) ? $this->params['form']['shipping_method'] : $this->Session->read("shipping_method_id");

		#print_r($this->Session->read());
		$shipping_id = $this->Session->read("shipping_id");
		$billing_id = $this->Session->read("billing_id");
		$payment_id = $this->Session->read("payment_id");
		if (!$shipping_id || !$billing_id || !$payment_id)
		{
			$this->Session->setFlash("Missing shipping, billing and payment information.");
			#return;
			$this->redirect("/checkout/review");
		}

		$shippingOptions = $this->get_all_shipping_options($shipping_id, $product_list);
		$shippingInfo = null;

		foreach($shippingOptions as $shippingOption)
		{
			if($shippingOption['shippingMethod']['shippingMethodID'] == $shipping_method_id)
			{
				$shippingInfo = $shippingOption;
			}
		}

		if (!$shippingInfo)
		{
			$this->Session->setFlash("Could not submit order, shipping information missing.");
			$this->redirect("/checkout/review");
		}

		# CONTINUE HERE>...
		$shipping_cost = $shippingInfo[0]['cost'];
		$subtotal = 0;

		$product_list = array();

		foreach($shoppingCart as $cartItem)
		{
			$code = $cartItem['productCode'];
			$item_price = $cartItem['quantity'] * $cartItem['unitPrice'];
			$subtotal += $item_price;
			if (empty($product_list[$code])) { $product_list[$code] = 0; }
			$product_list[$code] += $cartItem['quantity'];
		}

		$purchase = array();
		$purchase['Order_Date'] = $order_date;
		$purchase['Order_Status'] = $order_status;
		$purchase['Shipping_Method'] = $shipping_method_id;
		$purchase['Customer_ID'] = $this->get_customer_id();
		#echo "SID=$shipping_id\n<br/>";
		$purchase['Shipping_ID'] = $shipping_id;
		$purchase['Charge_Amount'] = $subtotal+$shipping_cost;
		$purchase['Shipping_Cost'] = $shipping_cost;
		$purchase['Billing_ID'] = $billing_id;
		$purchase['Credit_Card_ID'] = $payment_id;
		$purchase['order_comment'] = $this->params['form']['orderComment'];

		$ships_by = date('Y-m-d H:i:s', $this->Product->get_shipment_time($product_list));
		$purchase['ships_by'] = $ships_by;

		$this->Purchase->create();
		$this->Purchase->save(array('Purchase'=>$purchase));
		$purchaseID = $this->Purchase->id;

		return $purchaseID;
	}

	function load_cart()
	{
		list($shoppingCart, $subtotal, $product_list) = $this->get_cart_items();
		$this->set("shoppingCart", $shoppingCart);
		$this->set("subtotal", $subtotal);
		$this->set("product_map", Set::combine($this->Product->findAll(), '{n}.Product.code', '{n}.Product'));
		$buildable_products = $this->Product->findAll("buildable = 'yes' AND available = 'yes' AND is_stock_item = 0");
		$this->set("products", $buildable_products);

		$shipping_id = $this->Session->read("shipping_id");
		$shippingAddress = $this->ContactInfo->read(null, $shipping_id); # XXX allow for custom one just per this transaction.
		$shippingOptions = $this->ShippingPricePoint->calculate_shipping_options_list($shippingAddress, $this->viewVars['shoppingCart']); #array($zipCode, $country), $product_list);
		$this->set("shippingOptions", $shippingOptions);

		#$this->set("grandtotal", $subtotal);
	}


}
?>
